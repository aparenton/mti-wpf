//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18052
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace parent_bMedecine.ServicePatient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicePatient.IServicePatient")]
    public interface IServicePatient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetListPatient", ReplyAction="http://tempuri.org/IServicePatient/GetListPatientResponse")]
        System.Collections.Generic.List<Dbo.Patient> GetListPatient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetListPatient", ReplyAction="http://tempuri.org/IServicePatient/GetListPatientResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dbo.Patient>> GetListPatientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetPatient", ReplyAction="http://tempuri.org/IServicePatient/GetPatientResponse")]
        Dbo.Patient GetPatient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetPatient", ReplyAction="http://tempuri.org/IServicePatient/GetPatientResponse")]
        System.Threading.Tasks.Task<Dbo.Patient> GetPatientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/AddPatient", ReplyAction="http://tempuri.org/IServicePatient/AddPatientResponse")]
        bool AddPatient(Dbo.Patient user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/AddPatient", ReplyAction="http://tempuri.org/IServicePatient/AddPatientResponse")]
        System.Threading.Tasks.Task<bool> AddPatientAsync(Dbo.Patient user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/DeletePatient", ReplyAction="http://tempuri.org/IServicePatient/DeletePatientResponse")]
        bool DeletePatient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/DeletePatient", ReplyAction="http://tempuri.org/IServicePatient/DeletePatientResponse")]
        System.Threading.Tasks.Task<bool> DeletePatientAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicePatientChannel : parent_bMedecine.ServicePatient.IServicePatient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicePatientClient : System.ServiceModel.ClientBase<parent_bMedecine.ServicePatient.IServicePatient>, parent_bMedecine.ServicePatient.IServicePatient {
        
        public ServicePatientClient() {
        }
        
        public ServicePatientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicePatientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePatientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePatientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Dbo.Patient> GetListPatient() {
            return base.Channel.GetListPatient();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dbo.Patient>> GetListPatientAsync() {
            return base.Channel.GetListPatientAsync();
        }
        
        public Dbo.Patient GetPatient(int id) {
            return base.Channel.GetPatient(id);
        }
        
        public System.Threading.Tasks.Task<Dbo.Patient> GetPatientAsync(int id) {
            return base.Channel.GetPatientAsync(id);
        }
        
        public bool AddPatient(Dbo.Patient user) {
            return base.Channel.AddPatient(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddPatientAsync(Dbo.Patient user) {
            return base.Channel.AddPatientAsync(user);
        }
        
        public bool DeletePatient(int id) {
            return base.Channel.DeletePatient(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePatientAsync(int id) {
            return base.Channel.DeletePatientAsync(id);
        }
    }
}
