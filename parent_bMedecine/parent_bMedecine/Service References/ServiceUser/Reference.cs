//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18052
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace parent_bMedecine.ServiceUser {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceUser.IServiceUser")]
    public interface IServiceUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/GetListUser", ReplyAction="http://tempuri.org/IServiceUser/GetListUserResponse")]
        System.Collections.Generic.List<Dbo.User> GetListUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/GetListUser", ReplyAction="http://tempuri.org/IServiceUser/GetListUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Dbo.User>> GetListUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/GetUser", ReplyAction="http://tempuri.org/IServiceUser/GetUserResponse")]
        Dbo.User GetUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/GetUser", ReplyAction="http://tempuri.org/IServiceUser/GetUserResponse")]
        System.Threading.Tasks.Task<Dbo.User> GetUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/AddUser", ReplyAction="http://tempuri.org/IServiceUser/AddUserResponse")]
        bool AddUser(Dbo.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/AddUser", ReplyAction="http://tempuri.org/IServiceUser/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(Dbo.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/DeleteUser", ReplyAction="http://tempuri.org/IServiceUser/DeleteUserResponse")]
        bool DeleteUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/DeleteUser", ReplyAction="http://tempuri.org/IServiceUser/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/Connect", ReplyAction="http://tempuri.org/IServiceUser/ConnectResponse")]
        bool Connect(string login, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/Connect", ReplyAction="http://tempuri.org/IServiceUser/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(string login, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/Disconnect", ReplyAction="http://tempuri.org/IServiceUser/DisconnectResponse")]
        void Disconnect(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/Disconnect", ReplyAction="http://tempuri.org/IServiceUser/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/GetRole", ReplyAction="http://tempuri.org/IServiceUser/GetRoleResponse")]
        string GetRole(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceUser/GetRole", ReplyAction="http://tempuri.org/IServiceUser/GetRoleResponse")]
        System.Threading.Tasks.Task<string> GetRoleAsync(string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceUserChannel : parent_bMedecine.ServiceUser.IServiceUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceUserClient : System.ServiceModel.ClientBase<parent_bMedecine.ServiceUser.IServiceUser>, parent_bMedecine.ServiceUser.IServiceUser {
        
        public ServiceUserClient() {
        }
        
        public ServiceUserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceUserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceUserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceUserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Dbo.User> GetListUser() {
            return base.Channel.GetListUser();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Dbo.User>> GetListUserAsync() {
            return base.Channel.GetListUserAsync();
        }
        
        public Dbo.User GetUser(string login) {
            return base.Channel.GetUser(login);
        }
        
        public System.Threading.Tasks.Task<Dbo.User> GetUserAsync(string login) {
            return base.Channel.GetUserAsync(login);
        }
        
        public bool AddUser(Dbo.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(Dbo.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public bool DeleteUser(string login) {
            return base.Channel.DeleteUser(login);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string login) {
            return base.Channel.DeleteUserAsync(login);
        }
        
        public bool Connect(string login, string pwd) {
            return base.Channel.Connect(login, pwd);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(string login, string pwd) {
            return base.Channel.ConnectAsync(login, pwd);
        }
        
        public void Disconnect(string login) {
            base.Channel.Disconnect(login);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string login) {
            return base.Channel.DisconnectAsync(login);
        }
        
        public string GetRole(string login) {
            return base.Channel.GetRole(login);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleAsync(string login) {
            return base.Channel.GetRoleAsync(login);
        }
    }
}
